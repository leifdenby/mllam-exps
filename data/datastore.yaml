schema_version: v0.5.0
dataset_version: v0.1.0

output:
  variables:
    static: [grid_index, static_feature]
    state: [time, grid_index, state_feature]
    forcing: [time, grid_index, forcing_feature]
  coord_ranges:
    # time:
    #   start: 1991-01-01T00:00
    #   end: 2001-01-01T00:00
    #   step: PT3H
    ### for development:
    # set ranges to match extent of splits
    time:
      start: 1991-01-01T00:00
      end: 1991-01-29T00:00
      step: PT3H
    
  chunking:
    time: 1
  splitting:
    dim: time
    splits:
      # train:
      #   start: 1991-01-01T00:00
      #   end: 1999-01-01T00:00
      #   compute_statistics:
      #     ops: [mean, std, diff_mean, diff_std]
      #     dims: [grid_index, time]
      # val:
      #   start: 1999-01-01T00:00
      #   end: 2000-01-01T00:00
      # test:
      #   start: 2000-01-01T00:00
      #   end: 2001-01-01T00:00
    ### for development:
    # make 2 week train, 1 week val, 1 week test for now
      train:
        start: 1991-01-01T00:00
        end: 1991-01-15T00:00
        compute_statistics:
          ops: [mean, std, diff_mean, diff_std]
          dims: [grid_index, time]
      val:
        start: 1991-01-15T00:00
        end: 1991-01-22T00:00
      test:
        start: 1991-01-22T00:00
        end: 1991-01-29T00:00

inputs:
  
  danra_surface:
    path: /dcai/projects/cu_0003/data/sources/danra/v0.5.0/single_levels.zarr
    dims: [time, x, y]
    variables:
      - t2m
      - u10m
      - v10m
    dim_mapping:
      time:
        method: rename
        dim: time
      state_feature:
        method: stack_variables_by_var_name
        name_format: "{var_name}"
      grid_index:
        method: stack
        dims: [x, y]
    target_output_variable: state
  
  # danra_surface_forcing:
  #   path: /dcai/projects/cu_0003/data/sources/danra/v0.5.0/single_levels.zarr
  #   dims: [time, x, y]
  #   derived_variables:
  #     # derive variables to be used as forcings
  #     toa_radiation:
  #       kwargs:
  #         time: ds_input.time
  #         lat: ds_input.lat
  #         lon: ds_input.lon
  #       function: mllam_data_prep.ops.derive_variable.physical_field.calculate_toa_radiation
  #     hour_of_day_sin:
  #       kwargs:
  #         time: ds_input.time
  #         component: sin
  #       function: mllam_data_prep.ops.derive_variable.time_components.calculate_hour_of_day
  #     hour_of_day_cos:
  #       kwargs:
  #         time: ds_input.time
  #         component: cos
  #       function: mllam_data_prep.ops.derive_variable.time_components.calculate_hour_of_day
  #   dim_mapping:
  #     time:
  #       method: rename
  #       dim: time
  #     grid_index:
  #       method: stack
  #       dims: [x, y]
  #     forcing_feature:
  #       method: stack_variables_by_var_name
  #       name_format: "{var_name}"
  #   target_output_variable: forcing


  danra_lsm:
    path: /dcai/projects/cu_0003/data/sources/danra/v0.4.0/lsm.zarr
    dims: [x, y]
    variables:
      - lsm
    dim_mapping:
      grid_index:
        method: stack
        dims: [x, y]
      static_feature:
        method: stack_variables_by_var_name
        name_format: "{var_name}"
    target_output_variable: static

extra:
  projection:
    class_name: LambertConformal
    kwargs:
      central_longitude: 25.0
      central_latitude: 56.7
      standard_parallels: [56.7, 56.7]
      globe:
        semimajor_axis: 6367470.0
        semiminor_axis: 6367470.0
