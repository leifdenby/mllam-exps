stages:
  mllam_version:
    cmd: ${venv_path}/bin/python -c "from neural_lam import __version__; print(__version__)" > version.mllam.txt

  prepare_dataset:
    cmd: ${venv_path}/bin/python -m mllam_data_prep data/datastore.yaml --output data/datastore.zarr
    deps:
    - data/datastore.yaml
    outs:
    - data/datastore.zarr

  create_graph:
    cmd: ${venv_path}/bin/python -m neural_lam.create_graph --config_path data/config.yaml --name 1level
      --levels 1
    params:
    - data/config.yaml:
      - datastore
    deps:
    - data/datastore.zarr
    outs:
    - data/graph/

  train:
    cmd:
    - sbatch -W machines/slurm.train.sh --config_path ./data/config.yaml --logger mlflow --logger_project ${experiment_name} --venv_path ${venv_path}
    params:
    - params.yaml:
      - experiment_name
      - model
      - graph
      - hidden_dim
      - processor_layers
      - metrics_watch
    - data/training_params.yaml:
      - num_nodes
      - batch_size
      - epochs
      - val_steps_to_log
      - ar_steps_eval
    deps:
    - version.mllam.txt
    - data/graph/
    - data/config.yaml
    - data/datastore.yaml
    outs:
    - saved_models
  evaluate:
    cmd:
    - sbatch -W --nodes 1 machines/slurm.train.sh --config_path ./data/config.yaml --eval val --load
      ./saved_models/*/last.ckpt --logger mlflow --logger_project ${experiment_name} --venv_path ${venv_path}
    params:
    - params.yaml:
      - experiment_name
      - num_nodes
      - model
      - graph
      - hidden_dim
      - processor_layers
      - metrics_watch
    - data/evaluate_params.yaml:
      - epochs
      - batch_size
      - num_workers
    deps:
    - version.mllam.txt
    - data/graph/
    - data/config.yaml
    - data/datastore.yaml
    - saved_models
    outs:
    - mlruns
